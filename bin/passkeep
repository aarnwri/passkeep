#!/usr/bin/env ruby

require 'passkeep'
require 'trollop'
require 'io/console'
require 'openssl'
require 'digest'

def get_vault_password
  puts "Enter vault password:"
  # read from STDIN silently
  password = STDIN.noecho(&:gets)
end

def get_key_name_password (key_name)
  puts "Enter #{key_name} password:"
  # read from STDIN silently
  password = STDIN.noecho(&:gets)
end

def get_key_name_password_conf (key_name)
  puts "Confirm #{key_name} password:"
  # read from STDIN silently
  password = STDIN.noecho(&:gets)
end

#############
### START ###
#############

Passkeep::Utils.ensure_passkeep_dir
Passkeep::Utils.ensure_vaults_dir

options = Passkeep::MainMenu.parse

sub_command = ARGV.shift
case sub_command
when 'add'
  add_options = Passkeep::AddMenu.parse

  key_name = add_options[:key_name]
  login    = add_options[:login]
  url      = add_options[:url]
  meta     = add_options[:meta]

  password      = get_key_name_password(key_name)
  password_conf = get_key_name_password_conf(key_name)

  if password != password_conf
    puts "You can't type... try that again."
    exit(1)
  end

  vault_password = get_vault_password
  vault = Passkeep::Vault.new(name: Passkeep::Utils::DEFAULT_VAULT, password: vault_password)

  password_data_manager = Passkeep::PasswordDataManager.new(vault.data)
  password_data_manager.set_password(key_name, login, password)
  password_data_manager.set_url(key_name, login, url) if url
  password_data_manager.set_meta(key_name, login, meta) if meta

  vault.update(password_data_manager.data)
when 'show'
  show_options = Passkeep::ShowMenu.parse

  key_name  = show_options[:key_name]
  login     = show_options[:login]
  clipboard = show_options[:clipboard]

  vault_password = get_vault_password
  vault = Passkeep::Vault.new(name: Passkeep::Utils::DEFAULT_VAULT, password: vault_password)

  password_data_manager = Passkeep::PasswordDataManager.new(vault.data)
  if login && clipboard
    info_str = password_data_manager.show_login_info(key_name, login, clipboard: true)
  elsif login
    info_str = password_data_manager.show_login_info(key_name, login)
  else
    info_str = password_data_manager.show_key_info(key_name)
  end

  puts info_str
else
  Trollop::die "unknown subcommand #{sub_command.inspect}"
end
